# rownames(x) <- anno$Name
#
# nsnorm <- NanoStringNorm(
#         x = x,
# anno <-  fData(eset) %>%
#     dplyr::rename("Name" = "probe", "Code.Class" = "CodeClass")
# rownames(anno) <- anno$Name
#
# x <- as.data.frame(edata)
# rownames(x) <- anno$Name
#
# nsnorm <- NanoStringNorm(
#         x = x,
#         anno = anno,
#     dplyr::rename("Name" = "probe", "Code.Class" = "CodeClass")
# rownames(anno) <- anno$Name
#
# x <- as.data.frame(edata)
# rownames(x) <- anno$Name
#
# nsnorm <- NanoStringNorm(
#         x = x,
#         anno = anno,
#         CodeCount = 'geo.mean',
# rownames(anno) <- anno$Name
#
# x <- as.data.frame(edata)
# rownames(x) <- anno$Name
#
# nsnorm <- NanoStringNorm(
#         x = x,
#         anno = anno,
#         CodeCount = 'geo.mean',
#         Background = "none",
#
# x <- as.data.frame(edata)
# rownames(x) <- anno$Name
#
# nsnorm <- NanoStringNorm(
#         x = x,
#         anno = anno,
#         CodeCount = 'geo.mean',
#         Background = "none",
#         SampleContent = 'housekeeping.geo.mean',
# x <- as.data.frame(edata)
# rownames(x) <- anno$Name
#
# nsnorm <- NanoStringNorm(
#         x = x,
#         anno = anno,
#         CodeCount = 'geo.mean',
#         Background = "none",
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
# rownames(x) <- anno$Name
#
# nsnorm <- NanoStringNorm(
#         x = x,
#         anno = anno,
#         CodeCount = 'geo.mean',
#         Background = "none",
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#
# nsnorm <- NanoStringNorm(
#         x = x,
#         anno = anno,
#         CodeCount = 'geo.mean',
#         Background = "none",
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
# nsnorm <- NanoStringNorm(
#         x = x,
#         anno = anno,
#         CodeCount = 'geo.mean',
#         Background = "none",
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
#         take.log = F,
#         x = x,
#         anno = anno,
#         CodeCount = 'geo.mean',
#         Background = "none",
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
#         take.log = F,
#         return.matrix.of.endogenous.probes = TRUE,
#         anno = anno,
#         CodeCount = 'geo.mean',
#         Background = "none",
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
#         take.log = F,
#         return.matrix.of.endogenous.probes = TRUE,
#         verbose=F
#         CodeCount = 'geo.mean',
#         Background = "none",
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
#         take.log = F,
#         return.matrix.of.endogenous.probes = TRUE,
#         verbose=F
#     ) %>% as_tibble()
#         Background = "none",
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
#         take.log = F,
#         return.matrix.of.endogenous.probes = TRUE,
#         verbose=F
#     ) %>% as_tibble()
#
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
#         take.log = F,
#         return.matrix.of.endogenous.probes = TRUE,
#         verbose=F
#     ) %>% as_tibble()
#
# assert( identical(nsnorm, norm_))
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
#         take.log = F,
#         return.matrix.of.endogenous.probes = TRUE,
#         verbose=F
#     ) %>% as_tibble()
#
# assert( identical(nsnorm, norm_))
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
#         take.log = F,
#         return.matrix.of.endogenous.probes = TRUE,
#         verbose=F
#     ) %>% as_tibble()
#
# assert( identical(nsnorm, norm_))
#         SampleContent = 'housekeeping.geo.mean',
#         OtherNorm = "none",
#         round.values = TRUE,
#         is.log = FALSE,
#         take.log = F,
#         return.matrix.of.endogenous.probes = TRUE,
#         verbose=F
#     ) %>% as_tibble()
#
# assert( identical(nsnorm, norm_))
norm_
norm_ <- normalize_rna(edata, fdata)
library(here)
library(tidyverse)
library(testit)
library(Biobase)
ESET_RDS <- here("results/eset_raw.rds")
eset <- readRDS(ESET_RDS)
fdata <- fData(eset)
pdata <- pData(eset)
edata <- exprs(eset) %>% as_tibble()
# FUNCTIONS -----------------------------------------------------------
separate_controls <- function(edata, fdata, column="Code.Class"){
positive <- filter(edata, fdata[column] == "Positive")
hk <- filter(edata, fdata[column] == "Housekeeping")
endogenous <- filter(edata, fdata[column] == "Endogenous")
negative <- filter(edata, fdata[column] == "Negative")
dat <- list(pos = positive, neg = negative,
hk = hk, endog = endogenous)
return(dat)
}
geo_mean <- function(x) exp(sum(log(x))/length(x))
geo_mean_scale <- function(dat, ctrl) {
geo_means <- apply(ctrl, 2, geo_mean)
av_geo <- mean(geo_means)
fac <- av_geo/geo_means
norm_ <- mapply(`*`, dat, fac) %>% as_tibble()
return(norm_)
}
normalize_rna <- function(edata, fdata, round=T) {
n_hk <- sum(fdata$CodeClass == "Housekeeping")
n_endog <- sum(fdata$CodeClass == "Endogenous")
dat <- separate_controls(edata, fdata, column="CodeClass")
# KEY IS TO APPLY POSITIVE CONTROL SCALING TO THE HOUSEKEEPING GENES
dat1 <- rbind(dat$endog, dat$hk)
norm1 <- geo_mean_scale(dat1, dat$pos)
dat2 <- norm1[1:n_endog, ]
# use scaled HK genes for sample content normalization
hk <- norm1[(n_endog + 1):(n_endog+n_hk), ]
norm2 <- geo_mean_scale(dat2, hk)
if (round) norm2 <- round(norm2)
return(norm2)
}
# normalize  -----------------------------------------------------------
norm_ <- normalize_rna(edata, fdata)
library(here)
library(tidyverse)
library(testit)
library(Biobase)
ESET_RDS <- here("results/eset_raw.rds")
eset <- readRDS(ESET_RDS)
fdata <- fData(eset)
pdata <- pData(eset)
edata <- exprs(eset) %>% as_tibble()
# FUNCTIONS -----------------------------------------------------------
separate_controls <- function(edata, fdata, column="Code.Class"){
positive <- filter(edata, fdata[column] == "Positive")
hk <- filter(edata, fdata[column] == "Housekeeping")
endogenous <- filter(edata, fdata[column] == "Endogenous")
negative <- filter(edata, fdata[column] == "Negative")
dat <- list(pos = positive, neg = negative,
hk = hk, endog = endogenous)
return(dat)
}
geo_mean <- function(x) exp(sum(log(x))/length(x))
geo_mean_scale <- function(dat, ctrl) {
geo_means <- apply(ctrl, 2, geo_mean)
av_geo <- mean(geo_means)
fac <- av_geo/geo_means
norm_ <- mapply(`*`, dat, fac) %>% as_tibble()
return(norm_)
}
normalize_rna <- function(edata, fdata, round=T) {
n_hk <- sum(fdata$CodeClass == "Housekeeping")
n_endog <- sum(fdata$CodeClass == "Endogenous")
dat <- separate_controls(edata, fdata, column="CodeClass")
# KEY IS TO APPLY POSITIVE CONTROL SCALING TO THE HOUSEKEEPING GENES
dat1 <- rbind(dat$endog, dat$hk)
norm1 <- geo_mean_scale(dat1, dat$pos)
dat2 <- norm1[1:n_endog, ]
# use scaled HK genes for sample content normalization
hk <- norm1[(n_endog + 1):(n_endog+n_hk), ]
norm2 <- geo_mean_scale(dat2, hk)
if (round) norm2 <- round(norm2)
return(norm2)
}
# normalize  -----------------------------------------------------------
norm_ <- normalize_rna(edata, fdata)
norm_
norm_ <- normalize_rna(edata, fdata) %>%
as.matrix()
norm_
fdata <- as.data.frame(fData(rcc_set)) %>%
Biobase::AnnotatedDataFrame()
fdata <- as.data.frame(fData(eset)) %>%
Biobase::AnnotatedDataFrame()
fdata <- as.data.frame(fData(eset)) %>%
Biobase::AnnotatedDataFrame()
library(here)
library(tidyverse)
library(testit)
library(Biobase)
ESET_RDS <- here("results/eset_raw.rds")
eset <- readRDS(ESET_RDS)
fdata <- fData(eset)
pdata <- pData(eset)
edata <- exprs(eset) %>% as_tibble()
# FUNCTIONS -----------------------------------------------------------
separate_controls <- function(edata, fdata, column="Code.Class"){
positive <- filter(edata, fdata[column] == "Positive")
hk <- filter(edata, fdata[column] == "Housekeeping")
endogenous <- filter(edata, fdata[column] == "Endogenous")
negative <- filter(edata, fdata[column] == "Negative")
dat <- list(pos = positive, neg = negative,
hk = hk, endog = endogenous)
return(dat)
}
geo_mean <- function(x) exp(sum(log(x))/length(x))
geo_mean_scale <- function(dat, ctrl) {
geo_means <- apply(ctrl, 2, geo_mean)
av_geo <- mean(geo_means)
fac <- av_geo/geo_means
norm_ <- mapply(`*`, dat, fac) %>% as_tibble()
return(norm_)
}
normalize_rna <- function(edata, fdata, round=T) {
n_hk <- sum(fdata$CodeClass == "Housekeeping")
n_endog <- sum(fdata$CodeClass == "Endogenous")
dat <- separate_controls(edata, fdata, column="CodeClass")
# KEY IS TO APPLY POSITIVE CONTROL SCALING TO THE HOUSEKEEPING GENES
dat1 <- rbind(dat$endog, dat$hk)
norm1 <- geo_mean_scale(dat1, dat$pos)
dat2 <- norm1[1:n_endog, ]
# use scaled HK genes for sample content normalization
hk <- norm1[(n_endog + 1):(n_endog+n_hk), ]
norm2 <- geo_mean_scale(dat2, hk)
if (round) norm2 <- round(norm2)
return(norm2)
}
# normalize  -----------------------------------------------------------
norm_ <- normalize_rna(edata, fdata) %>%
as.matrix()
norm_
dim(norm
dim(norm)
dim(norm_)
fdata
glimpse(fdata)
row_names <- filter(fdata, CodeClass=="Endogenous")$Hgnc_Symbol
row_names
norm_ <- normalize_rna(edata, fdata) %>%
as.matrix()
rownames(norm_) <- row_names
pdata <- as.data.frame(pData(eset)) %>%
Biobase::AnnotatedDataFrame()
pdata <- as.data.frame(pData(eset)) %>%
Biobase::AnnotatedDataFrame()
fdata <- as.data.frame(fData(eset)) %>%
filter(CodeClass=="Endogenous") %>%
Biobase::AnnotatedDataFrame()
stopifnot(identical(colnames(edata), rownames(pdata)) )
stopifnot(identical(colnames(norm_), rownames(pdata)) )
fdata
rownames(fat)
rownames(fata)
rownames(fdata)
eset <- Biobase::ExpressionSet(assayData = norm_,
phenoData = pdata,
featureData = fdata)
rownames(norm_) <- rowname(fdata)
eset <- Biobase::ExpressionSet(assayData = norm_,
phenoData = pdata,
featureData = fdata)
rownames(norm_) <- rownames(fdata)
eset <- Biobase::ExpressionSet(assayData = norm_,
phenoData = pdata,
featureData = fdata)
saveRDS(eset, here("results/eset_norm.rds"))
# TIS weights file, with columns for GENE and Weights
TIS_FILE <- here("ref/example_tis_weights_file.csv")
# expression set of normalized gene counts with HGNC gene identifiers saved
# as minimal row data, which must match GENE column in TIS_FILE
ESET_RDS <- here("results/eset_norm.rds")
eset <- readRDS(ESET_RDS)
fdata <- fData(eset)
pdata <- pData(eset)
edata <- as_tibble(exprs(eset))
# load weights
weights <- read_csv(TIS_FILE)
# filter fdata for endogenous probes and remove unnecessary columns
fdata <- filter(fdata, CodeClass=="Endogenous") %>%
janitor::clean_names() %>%
dplyr::select(hgnc=hgnc, probe=probe)
glimpse(fdata)
# filter fdata for endogenous probes and remove unnecessary columns
fdata <- filter(fdata, CodeClass=="Endogenous") %>%
janitor::clean_names() %>%
dplyr::select(hgnc=Hgnc_Symbol, probe=probe)
filter(fdata, CodeClass=="Endogenous") %>%
janitor::clean_names()
filter(fdata, CodeClass=="Endogenous") %>%
janitor::clean_names() %>% glimpse()
# filter fdata for endogenous probes and remove unnecessary columns
fdata <- filter(fdata, CodeClass=="Endogenous") %>%
janitor::clean_names() %>%
dplyr::select(hgnc=hgnc_symbol, probe=probe_id)
# select TIS genes and confirm proper ordering wrt weights
dat <- as.data.frame(edata)
rownames(dat) <- fdata$hgnc
dat <- dat[weights$GENE,]
assert(identical(rownames(dat), weights$GENE))
dat
fdata
# select TIS genes and confirm proper ordering wrt weights
dat <- as.data.frame(edata)
rownames(dat) <- fdata$hgnc_symbol
dat <- dat[weights$GENE,]
assert(identical(rownames(dat), weights$GENE))
rowname(dat)
rownames(dat)
# select TIS genes and confirm proper ordering wrt weights
dat <- as.data.frame(edata)
dat
fdata$hgnc
rownames(dat) <- fdata$hgnc
rowname(dat0)
dim(dat)
dim(fdata)
# select TIS genes and confirm proper ordering wrt weights
dat <- as.data.frame(edata)
rownames(dat) <- fdata$hgnc
fdata
View(fdata)
fdata <- filter(fdata, CodeClass=="Endogenous") %>%
janitor::clean_names()
# filter fdata for endogenous probes and remove unnecessary columns
fdata <- fData(eset)
# filter fdata for endogenous probes and remove unnecessary columns
fdata <- fData(eset) %>%
filter(CodeClass=="Endogenous") %>%
janitor::clean_names() %>%
dplyr::select(hgnc=hgnc_symbol, probe=probe_id)
fdata <- fData(eset) %>%
filter(CodeClass=="Endogenous") %>%
janitor::clean_names()
View(fdata)
# filter fdata for endogenous probes and remove unnecessary columns
fdata <- fData(eset) %>%
janitor::clean_names() %>%
filter(code_class=="Endogenous") %>%
# fill missing HGNC symbol for IGL gene to avoid error later
mutate(hgnc_symbol = coalesce(hgnc_symbol, gene_name)) %>%
dplyr::select(hgnc=hgnc_symbol, probe=probe_id)
# select TIS genes and confirm proper ordering wrt weights
dat <- as.data.frame(edata)
rownames(dat) <- fdata$hgnc
dat <- dat[weights$GENE,]
assert(identical(rownames(dat), weights$GENE))
# calculate TIS as matrix multiplication of log2 transformed gene counts
# with weights
tis <- t(log2(dat)) %*% weights$Weights
# format as tibble
scores <- tibble(study_id = names(dat), TIS = tis[,1])
scores
pdata
dat
glimpse(pdata)
pdata <- pData(eset) %>%
janitor::clean_names()
View(pdata)
require(janitor)
# format as tibble
pdata <- pData(eset) %>%
janitor::clean_names() %>%
dplyr::select(file_name, study_id, sample_type=sample_type_2)
# format as tibble
pdata <- pData(eset) %>%
janitor::clean_names() %>%
dplyr::select(file_name, study_id, sample_type=sample_type_2)
pdata
scores <- tibble(file_name = names(dat), TIS = tis[,1]) %>%
left_join(pdata, by="file_name")
scores
write_tsv(scores, here("results/TIS_scores.tsv"))
# save boxplot
ggoboxplot(scores, x="sample_type", y="TIS", color="sample_type")
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type")
library(ggpubr)
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type")
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type",
add="jitter")
?ggboxplot
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type",
add="jitter", palette="nejm")
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type",
add="jitter", palette="nejm", legend="right",
xlab="Sample Type", ylab="Tumor Inflammation Signature")
ggsave(here("results/TIS_boxplot.pdf"), h=5,w=5)
ggsave(here("results/TIS_boxplot.pdf"), h=4,w=5)
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type",
add="jitter", palette="nejm", legend="right",
xlab="Sample Type", ylab="Tumor Inflammation Signature",
title="Example TIS boxplot")
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type",
add="jitter", palette="nejm", legend="right",
xlab="Sample Type", ylab="Tumor Inflammation Signature",
title="Example TIS boxplot",
subtitle="Note: for workflow testing, scores not accurate")
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type",
add="jitter", palette="nejm", legend="right",
xlab="Sample Type", ylab="Tumor Inflammation Signature",
title="Example TIS boxplot",
subtitle="Note: for workflow testing; not using published weights")
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type",
add="jitter", palette="nejm", legend="none",
xlab="Sample Type", ylab="Tumor Inflammation Signature",
title="Example TIS boxplot",
subtitle="Note: for workflow testing; not using published weights")
ggsave(here("results/TIS_boxplot.pdf"), h=4,w=4)
# save boxplot
ggboxplot(scores, x="sample_type", y="TIS", color="sample_type",
add="jitter", palette="nejm", legend="none",
xlab="Sample Type", ylab="Tumor Inflammation Signature",
title="Example TIS boxplot",
subtitle="Note: for workflow testing only")
ggsave(here("results/TIS_boxplot.pdf"), h=4,w=4)
sessionInfo()
write_tsv(norm_, here("results/normalized_nanostring_counts.tsv"))
as.data.frame(norm_) %>%
write_tsv(here("results/normalized_nanostring_counts.tsv"))
as.data.frame(norm_) %>%
rownames_to_column(var="Gene") %>%
write_tsv(here("results/normalized_nanostring_counts.tsv"))
as.data.frame(norm_) %>%
rownames_to_column(var="Probe") %>%
write_tsv(here("results/normalized_nanostring_counts.tsv"))
source("~/Desktop/gapp_immune/R/_github/scripts/load_RCC_QC.R")
source("~/Desktop/gapp_immune/R/_github/scripts/normalize.R")
source("~/Desktop/gapp_immune/R/_github/scripts/calculate_TIS.R")
